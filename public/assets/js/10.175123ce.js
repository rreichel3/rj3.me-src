(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{210:function(e,t,o){"use strict";o.r(t);var a=o(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"reading-your-car-s-obd-ii-output"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reading-your-car-s-obd-ii-output"}},[e._v("#")]),e._v(" Reading Your Car's OBD II Output")]),e._v(" "),o("p",[e._v("I‚Äôve always been fascinated by cars. Well, really vehicles in general.  The fact that people have figured out how to get thousands of distinct pieces to function together well enough to trust it with our safety astounds me. In this fascination, I decided I wanted to a dig a bit deeper into how a car actually functions.  Of course, there‚Äôs the engine, the drivetrain, the brakes, etc but the question I asked, being a Computer Science student, is how it all fits together. So the real question is, ‚ÄúHow do the brakes, engine, air-conditioning, engine, exhaust, air-intake, locks, dashboard, and 50 other things all talk to each other?")]),e._v(" "),o("p",[e._v("The answer is rather simple. Most of the time these are all connected to what‚Äôs called a Controller Area Network (CAN) bus.  If you think back to the beginning of your networks class or are old enough to remember it being a common occurrence you might recall a bus network. For those whose memory has perhaps lapsed, a bus network is a network where all devices are connected to the same data stream. That means that if one device sends out a packet of data, every other device on the network receives that packet.  As you can imagine, this creates a TON of traffic but is also awesome if you‚Äôre wanting to see how your car works.  This bus can be interfaced using the standard OBD-II port found on almost all modern cars.  After discovering how these work I ordered an OBD-II adapter from Amazon to get tinkering with my car.")]),e._v(" "),o("div",{staticClass:"custom-block danger"},[o("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),o("p",[e._v("Disclaimer: I‚Äôve never really worked with serial connections professionally before. This stuff below, if attempted, is at your own risk. Sure, it worked for me but if you don‚Äôt feel confident (or stupid) enough to mess around with your car, don‚Äôt. Seriously, this could possibly jack your car up.")])]),e._v(" "),o("h2",{attrs:{id:"finding-the-port-on-your-car"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#finding-the-port-on-your-car"}},[e._v("#")]),e._v(" Finding the port on your car")]),e._v(" "),o("p",[e._v("This step is usually pretty straightforward.  The law (in the United States) mandates that the OBD-II port be within a couple of feet of the steering wheel.  Usually, its under the steering wheel on either the right or left side.  Look past the plastic and up inside the footwell ‚Äì it should be there. If you still can‚Äôt find it, a quick search for your make and model of the car should help you find it.")]),e._v(" "),o("h2",{attrs:{id:"using-your-computer-to-connect-to-a-serial-connection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#using-your-computer-to-connect-to-a-serial-connection"}},[e._v("#")]),e._v(" Using your computer to connect to a serial connection")]),e._v(" "),o("p",[e._v("There are a number of ways to connect to your ELM327 from your computer.  You could download a serial console emulator and connect your device to it, or if you run OSX or Linux you can use the handy utility screen which acts as a screen manager using VT100/ANSI terminal emulation.  Its really quite useful. Here‚Äôs how I connected to my adapter:")]),e._v(" "),o("pre",[o("code",[e._v("screen -L /dev/tty.SLAB_USBtoUART 38400\n")])]),e._v(" "),o("p",[e._v("What‚Äôs this command doing?  We‚Äôre telling screen to turn on output logging with the -L command then we‚Äôre specifying the device we want to connect to.  Most ELM327 drivers will mount using the name you see here, SLAB_USBtoUART. Lastly, that large number at the end is the baud rate which hopefully you remember specifies the speed at which the devices communicate with each other.  Once you run this command, you should see a blank screen with a prompt. At this point you‚Äôre ready to start interacting with the device!  Just be warned there are a few steps I recommend to configure your ELM and make it easier to use.")]),e._v(" "),o("h2",{attrs:{id:"understanding-elm327-commands"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#understanding-elm327-commands"}},[e._v("#")]),e._v(" Understanding ELM327 Commands")]),e._v(" "),o("p",[e._v("This device has a ton of options, the full list can be found from elm electrionic‚Äôs website, here. (Note: all the commands seen in that PDF assume you‚Äôve entered I‚Äôm just going to gloss over a few here but first I‚Äôll go through the few I recommend you run every time you connect.  First, you‚Äôll want to type "),o("code",[e._v("ATL1")]),e._v(" then press enter. This will turn on linefeeds so that all the output doesn‚Äôt keep overwriting itself. Next you‚Äôll want to turn on ATH1 to turn on the CAN headers, especially if you‚Äôre wanting to do any kind of analysis.  Next you‚Äôll want to run ‚ÄúATS1‚Äù to turn on the printing of spaces.  Lastly, running ‚ÄúATAL‚Äù you can turn on allowing long packets which is useful to view more than the standard length packet. From here you should be able to run what you‚Äôd like and start collecting data.  The command to start collecting data is ‚ÄúATMA‚Äù however you may find that the buffer on your ELM327 fills up too quickly.  If that seems to be the case you‚Äôll need to filter your packets based on specifically what you want using the command "),o("code",[e._v("ATCM <hex mask>")]),e._v("  This should help to alleviate the "),o("code",[e._v("buffer filled")]),e._v(" error you may find.  Below is a table that outlines the commands I‚Äôve shared here but in a more concise format.")]),e._v(" "),o("pre",[o("code",[e._v("ATL1 - Turn on LineFeed\nATH1 - Turn on headers\nATS1 - Turn on spaces\nATAL - Allow long packets\nATCM - Use a hex mask to filter packets\nATMA - Turn on collect all packets\n")])]),e._v(" "),o("h2",{attrs:{id:"final-thoughts"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#final-thoughts"}},[e._v("#")]),e._v(" Final Thoughts")]),e._v(" "),o("p",[e._v("This is a really cool little board that can be purchased for a relatively inexpensive price.  I always find it cool being able to tinker around with the things I use every day, especially something as complicated as a car.  I‚Äôve also written an application in Go that can help do the interfacing with and data dumping from the module. It should be pretty quick as I attempt to pull data from the buffer ASAP in hopes that it doesn‚Äôt fill up, but inevitably we can only move as fast as the ELM327 chip üò¶.  That code can be found "),o("a",{attrs:{href:"https://github.com/rreichel3/gobd",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);